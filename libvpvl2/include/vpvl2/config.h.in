/* ----------------------------------------------------------------- */
/*                                                                   */
/*  Copyright (c) 2010-2013  hkrn                                    */
/*                                                                   */
/* All rights reserved.                                              */
/*                                                                   */
/* Redistribution and use in source and binary forms, with or        */
/* without modification, are permitted provided that the following   */
/* conditions are met:                                               */
/*                                                                   */
/* - Redistributions of source code must retain the above copyright  */
/*   notice, this list of conditions and the following disclaimer.   */
/* - Redistributions in binary form must reproduce the above         */
/*   copyright notice, this list of conditions and the following     */
/*   disclaimer in the documentation and/or other materials provided */
/*   with the distribution.                                          */
/* - Neither the name of the MMDAI project team nor the names of     */
/*   its contributors may be used to endorse or promote products     */
/*   derived from this software without specific prior written       */
/*   permission.                                                     */
/*                                                                   */
/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND            */
/* CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,       */
/* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF          */
/* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          */
/* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS */
/* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,          */
/* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED   */
/* TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     */
/* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON */
/* ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   */
/* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    */
/* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           */
/* POSSIBILITY OF SUCH DAMAGE.                                       */
/* ----------------------------------------------------------------- */

/* This file is automatically generated by CMake and all changes will be lost */
#pragma once
#ifndef VPVL2_CONFIG_H_
#define VPVL2_CONFIG_H_

/* use OpenGL coordinate system */
#cmakedefine VPVL2_COORDINATE_OPENGL

/* Build libvpvl2 with Open Asset Import Library */
#cmakedefine VPVL2_LINK_ASSIMP

/* Build libvpvl2's renderer with NVIDIA Cg based rendering engines */
#cmakedefine VPVL2_ENABLE_NVIDIA_CG

/* Build libvpvl2 for iOS */
#cmakedefine VPVL2_BUILD_IOS

/* Link libvpvl2 against GLEW */
#cmakedefine VPVL2_LINK_GLEW

/* Link libvpvl2 against Qt */
#cmakedefine VPVL2_LINK_QT

/* Build libvpvl2 with OpenCL support */
#cmakedefine VPVL2_ENABLE_OPENCL

/* Build libvpvl2 with OpenGL ES2 support */
#cmakedefine VPVL2_ENABLE_GLES2

/* Build libvpvl2 with OpenMP support */
#cmakedefine VPVL2_ENABLE_OPENMP

/* Build libvpvl2 with Offscreen Mesa3D driver */
#cmakedefine VPVL2_ENABLE_OSMESA

/* Link libvpvl2 against NVIDIA texture tools */
#cmakedefine VPVL2_LINK_NVTT

/* Link libvpvl2 against libvpvl */
#cmakedefine VPVL2_LINK_VPVL

/* Link libvpvl2 against Intel Threading Building Blocks */
#cmakedefine VPVL2_LINK_INTEL_TBB

/* Link libvpvl2 against SFML */
#cmakedefine VPVL2_LINK_SFML

/* Link libvpvl2 against Google Glog */
#cmakedefine VPVL2_LINK_GLOG

/* Platform is Emscripten */
#cmakedefine VPVL2_PLATFORM_EMSCRIPTEN

/* Platform is Raspberry Pi */
#cmakedefine VPVL2_PLATFORM_RASPBERRY_PI

/* Build library as dynamic library */
#cmakedefine BUILD_SHARED_LIBS

/* Enable archive class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_ARCHIVE

/* Enable effect class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_EFFECT

/* Enable project class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_PROJECT

/* Enable render context class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_RENDERCONTEXT

/* Enable Bullet Physics world class extension extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_WORLD

/* Has GNU GCC style compiler TLS (Thread Local Storage) support */
#cmakedefine VPVL2_HAS_STATIC_TLS_GNU

/* Has MSVC style compiler TLS (Thread Local Storage) support */
#cmakedefine VPVL2_HAS_STATIC_TLS_MSVC

/* version */
#define VPVL2_VERSION_MAJOR @VPVL2_VERSION_MAJOR@
#define VPVL2_VERSION_COMPAT @VPVL2_VERSION_COMPAT@
#define VPVL2_VERSION_MINOR @VPVL2_VERSION_MINOR@

#define VPVL2_MAKE_VERSION(major, compat, minor) \
    (((major) << 16) | ((compat) << 8) | (minor))
#define VPVL2_VERSION VPVL2_MAKE_VERSION(VPVL2_VERSION_MAJOR, \
                                         VPVL2_VERSION_COMPAT, \
                                         VPVL2_VERSION_MINOR)

#define VPVL2_VERSION_STRING "@VPVL2_VERSION@"

/* _MSC_VER < 1300 (= Visual Studio 6) doesn't support */
#if (defined(_MSC_VER) && _MSC_VER < 1600)
  #ifndef _MSC_STDINT_H_
    typedef signed __int8 int8_t;
    typedef unsigned __int8 uint8_t;
    typedef signed __int16 int16_t;
    typedef unsigned __int16 uint16_t;
    typedef signed __int32 int32_t;
    typedef unsigned __int32 uint32_t;
    typedef signed __int64 int64_t;
    typedef unsigned __int64 uint64_t;
    #define _MSC_STDINT_H_
  #endif /* _MSC_STDINT_H_ */
#else
#include <stdint.h>
  /* SIZE_MAX is C99 macro and use alternative (32bit) if not defined */
  #ifndef SIZE_MAX
    #define SIZE_MAX 4294967295U
  #endif
#endif /* (defined(_MSC_VER) && _MSC_VER < 1600) */

#if defined (WIN32)
  #if defined(vpvl2_EXPORTS)
    #define VPVL2_API __declspec(dllexport)
  #elif defined(BUILD_SHARED_LIBS)
    #define VPVL2_API __declspec(dllimport)
  #else
    #define VPVL2_API
  #endif /* defined(vpvl2_EXPORTS) */
#else /* defined (_WIN32) */
 #if defined(__GNUC__) && __GNUC__ >= 4
  #define VPVL2_API __attribute__ ((visibility("default")))
 #else
  #define VPVL2_API
 #endif /* defined(__GNUC__) && __GNUC__ >= 4 */
#endif

#if defined(VPVL2_HAS_STATIC_TLS_GNU)
#define VPVL2_STATIC_TLS(expr) __thread expr
#elif defined(VPVL2_HAS_STATIC_TLS_MSVC)
#define VPVL2_STATIC_TLS(expr) __declspec(thread) expr
#else
#define VPVL2_STATIC_TLS(expr) expr
#endif

#ifdef VPVL2_LINK_GLOG
#ifdef _MSC_VER
#define GLOG_NO_ABBREVIATED_SEVERITIES
#endif
#include <glog/logging.h>
#define VPVL2_LOG(level, expr) LOG(level) << expr
#define VPVL2_DLOG(level, expr) LOG(level) << expr
#define VPVL2_VLOG(level, expr) VLOG(level) << expr
#define VPVL2_DVLOG(level, expr) DVLOG(level) << expr
#define VPVL2_CHECK(assertion) CHECK(assertion)
#define VPVL2_DCHECK(assertion) CHECK(assertion)
#define VPVL2_DCHECK_NOTNULL(assertion) CHECK_NOTNULL(assertion)
#define VPVL2_DCHECK_GT(expected, actual) CHECK_GT(expected, actual)
#else
#define VPVL2_LOG(level, expr)
#define VPVL2_DLOG(level, expr)
#define VPVL2_VLOG(level, expr)
#define VPVL2_DVLOG(level, expr)
#define VPVL2_CHECK(assertion)
#define VPVL2_DCHECK(assertion)
#define VPVL2_DCHECK_NOTNULL(assertion)
#define VPVL2_DCHECK_GT(expected, actual)
#endif

#define VPVL2_DISABLE_COPY_AND_ASSIGN(TypeName) \
    TypeName(const TypeName &); \
    void operator=(const TypeName &);

#define VPVL2_MAKE_STATIC_CLASS(TypeName) \
    TypeName(); \
    ~TypeName(); \
    VPVL2_DISABLE_COPY_AND_ASSIGN(TypeName)

#endif
