////////////////////////////////////////////////////////////////////////////////////////////////
//
//  full.fx ver1.4
//  作成: 舞力介入P
//
//  * This effect is modified to use AbsoluteShadow (created by soboro see http://sdrv.ms/OFRNsy)
//
////////////////////////////////////////////////////////////////////////////////////////////////
// パラメータ宣言

// 座法変換行列
float4x4 WorldViewProjMatrix      : WORLDVIEWPROJECTION;
float4x4 WorldMatrix              : WORLD;
float4x4 ViewMatrix               : VIEW;

float3   LightDirection    : DIRECTION < string Object = "Light"; >;
float3   CameraPosition    : _POSITION  < string Object = "Camera"; >;

// マテリアル色
float4   MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;
float3   MaterialAmbient   : AMBIENT  < string Object = "Geometry"; >;
float3   MaterialEmmisive  : EMISSIVE < string Object = "Geometry"; >;
float3   MaterialSpecular  : SPECULAR < string Object = "Geometry"; >;
float    SpecularPower     : SPECULARPOWER < string Object = "Geometry"; >;
float3   MaterialToon      : TOONCOLOR;
float4   EdgeColor         : EDGECOLOR;
float    EdgeWidth         : EDGEWIDTH;

// ライト色
float3   LightDiffuse      : DIFFUSE   < string Object = "Light"; >;
float3   LightAmbient      : AMBIENT   < string Object = "Light"; >;
float3   LightSpecular     : SPECULAR  < string Object = "Light"; >;
static float4 DiffuseColor  = MaterialDiffuse  * float4(LightDiffuse, 1.0f);
static float3 AmbientColor  = saturate(MaterialAmbient  * LightAmbient + MaterialEmmisive);
static float3 SpecularColor = MaterialSpecular * LightSpecular;

bool     parthf;   // パースペクティブフラグ
bool     transp;   // 半透明フラグ
bool     spadd;    // スフィアマップ加算合成フラグ
#define SKII1 0.5
#define SKII2 0.5
#define Toon  3

// オブジェクトのテクスチャ
texture ObjectTexture : MATERIALTEXTURE;
sampler ObjectTextureSampler = sampler_state {
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
};

// スフィアマップのテクスチャ
texture ObjectSphereMap : MATERIALSPHEREMAP;
sampler ObjectSphereSampler = sampler_state {
    texture = <ObjectSphereMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
};

////////////////////////////////////////////////////////////////////////////////////////////////
// 輪郭描画

// 頂点シェーダ
float4 ColorRender_VS(float4 Pos : POSITION) : POSITION
{
    // カメラ視点のワールドビュー射影変換
    return mul( Pos, WorldViewProjMatrix ) * EdgeWidth;
}

// ピクセルシェーダ
float4 ColorRender_PS() : COLOR
{
    // 輪郭色で塗りつぶし
    return EdgeColor;
}

// 輪郭描画用テクニック
technique EdgeTec < string MMDPass = "edge"; > {
    pass DrawEdge {
        AlphaBlendEnable = FALSE;
        AlphaTestEnable = FALSE;

        VertexShader = compile glslv ColorRender_VS();
        PixelShader  = compile glslf ColorRender_PS();
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// 影（非セルフシャドウ）描画

// 頂点シェーダ
float4 Shadow_VS(float4 Pos : POSITION) : POSITION
{
    // カメラ視点のワールドビュー射影変換
    return mul( Pos, WorldViewProjMatrix );
}

// ピクセルシェーダ
float4 Shadow_PS() : COLOR
{
    // アンビエント色で塗りつぶし
    return float4(AmbientColor.rgb, 0.65f);
}

// 影描画用テクニック
technique ShadowTec < string MMDPass = "shadow"; > {
    pass DrawShadow {
        AlphaBlendEnable = True;
        AlphaTestEnable = True;
        VertexShader = compile glslv Shadow_VS();
        PixelShader  = compile glslf Shadow_PS();
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウOFF）

struct VS_OUTPUT {
    float4 Pos        : POSITION;    // 射影変換座標
    float4 Tex        : TEXCOORD1;   // テクスチャ + スフィアテクスチャ座標
    float3 Normal     : TEXCOORD2;   // 法線
    float3 Eye        : TEXCOORD3;   // カメラとの相対位置
    float4 Color      : COLOR0;      // ディフューズ色
};

VS_OUTPUT VPVM_GetVertexShaderOutput(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0, bool useSphereMap, bool useToon)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;

    // カメラ視点のワールドビュー射影変換
    Out.Pos = mul( Pos, WorldViewProjMatrix );

    // カメラとの相対位置
    Out.Eye = CameraPosition - mul( Pos, WorldMatrix ).xyz;
    // 頂点法線
    Out.Normal = mul( Normal, (float3x3)WorldMatrix );

    // ディフューズ色＋アンビエント色 計算
    Out.Color.rgb = AmbientColor;
    if (!useToon) {
        Out.Color.rgb += max(0,dot( Out.Normal, -LightDirection )) * DiffuseColor.rgb;
    }
    Out.Color.a = DiffuseColor.a;
    Out.Color = saturate( Out.Color );

    // テクスチャ座標
    Out.Tex = float4(Tex, float2(0));

    if ( useSphereMap ) {
        // スフィアマップテクスチャ座標
        float2 NormalWV = mul( Out.Normal, (float3x3)ViewMatrix ).xy;
        Out.Tex.z = NormalWV.x * 0.5f + 0.5f;
        Out.Tex.w = NormalWV.y * -0.5f + 0.5f;
    }

    return Out;
}

struct PS_Pixel {
    float4 Color;
    float4 ShadowColor;
};

PS_Pixel VPVM_GetMaterialColor(VS_OUTPUT IN, bool useTexture, bool useSphereMap)
{
    // スペキュラ色計算
    float3 HalfVector = normalize(normalize(IN.Eye) + -LightDirection);
    float3 Specular = pow(max(0, dot( HalfVector, normalize(IN.Normal))), SpecularPower) * SpecularColor;

    PS_Pixel Pixel = (PS_Pixel)0;
    Pixel.Color = IN.Color;
    Pixel.ShadowColor = float4(AmbientColor, Pixel.Color.a);  // 影の色
    if (useTexture) {
        // テクスチャ適用
        float4 TexColor = tex2D(ObjectTextureSampler, IN.Tex.xy);
        Pixel.Color *= TexColor;
        Pixel.ShadowColor *= TexColor;
    }
    if (useSphereMap) {
        // スフィアマップ適用
        float4 TexColor = tex2D(ObjectSphereSampler, IN.Tex.zw);
        if (spadd) {
            Pixel.Color.rgb += TexColor.rgb;
            Pixel.ShadowColor.rgb += TexColor.rgb;
        }
        else {
            Pixel.Color.rgb *= TexColor.rgb;
            Pixel.ShadowColor.rgb *= TexColor.rgb;
        }
    }
    // スペキュラ適用
    Pixel.Color.rgb += Specular;
    return Pixel;
}

// 頂点シェーダ
VS_OUTPUT Basic_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon)
{
    return VPVM_GetVertexShaderOutput(Pos, Normal, Tex, useSphereMap, useToon);
}

// ピクセルシェーダ
float4 Basic_PS(VS_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon) : COLOR0
{
    PS_Pixel Pixel = VPVM_GetMaterialColor(IN, useTexture, useSphereMap);
    if ( useToon ) {
        // トゥーン適用
        float LightNormal = dot( IN.Normal, -LightDirection );
        Pixel.Color.rgb *= lerp(MaterialToon, float3(1,1,1), saturate(LightNormal * 16 + 0.5));
    }
    return Pixel.Color;
}

// オブジェクト描画用テクニック（アクセサリ用）
// 不要なものは削除可
technique MainTec0 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(false, false, false);
        PixelShader  = compile glslf Basic_PS(false, false, false);
    }
}

technique MainTec1 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(true, false, false);
        PixelShader  = compile glslf Basic_PS(true, false, false);
    }
}

technique MainTec2 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(false, true, false);
        PixelShader  = compile glslf Basic_PS(false, true, false);
    }
}

technique MainTec3 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(true, true, false);
        PixelShader  = compile glslf Basic_PS(true, true, false);
    }
}

// オブジェクト描画用テクニック（PMDモデル用）
technique MainTec4 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(false, false, true);
        PixelShader  = compile glslf Basic_PS(false, false, true);
    }
}

technique MainTec5 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(true, false, true);
        PixelShader  = compile glslf Basic_PS(true, false, true);
    }
}

technique MainTec6 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(false, true, true);
        PixelShader  = compile glslf Basic_PS(false, true, true);
    }
}

technique MainTec7 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv Basic_VS(true, true, true);
        PixelShader  = compile glslf Basic_PS(true, true, true);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// セルフシャドウ用Z値プロット

#define PMD_SHADOWPOWER 0.0
#define X_SHADOWPOWER 1.0

float4x4 VecToMatrix(float3 vec1, float3 vec2){

    float3 axis = normalize(cross(vec1, vec2));

    float nx = axis.x;
    float ny = axis.y;
    float nz = axis.z;

    float c = dot(vec1, vec2);
    float rad = acos(c);
    float nc = 1 - c;
    float s = sin(rad);

    float4x4 val = {
        {nx*nx*nc+c,    nx*ny*nc-nz*s, nz*nx*nc+ny*s, 0},
        {nx*ny*nc+nz*s, ny*ny*nc+c,    ny*nz*nc-nx*s, 0},
        {nz*nx*nc-ny*s, ny*nz*nc+nx*s, nz*nz*nc+c,    0},
        {0,0,0,1}
    };

    float4x4 val2 = {
        {1,0,0,0},
        {0,1,0,0},
        {0,0,1,0},
        {0,0,0,1}
    };

    return val;
}

float4x4 WorldMatrixX   : WORLD;
float3   ShadowCenter   : SELFSHADOWVPVM < string name = "Center"; >;
float2   ShadowSize     : SELFSHADOWVPVM < string name = "Size"; >;
float    ShadowDistance : SELFSHADOWVPVM < string name = "Distance"; >;
float    ShadowRate     : SELFSHADOWVPVM < string name = "Rate"; >;

static float size = ShadowDistance * 15;
static float4x4 LightWorldMatrix = {
    {1/size, 0, 0, 0},
    {0, 1/size, 0, 0},
    {0, 0, 1/size, 0},
    {-ShadowCenter.x/size, -ShadowCenter.y/size, ShadowCenter.z/size, 1}
};

static float4x4 LightViewMatrix = VecToMatrix(float3(0,0,-1), normalize(LightDirection));
static float ZFar = ShadowDistance * 30;
static float4x4 LightProjMatrix = {
    {1, 0, 0, 0.0},
    {0, 1, 0, 0.0},
    {0, 0, 1/ZFar, 0.5},
    {0, 0, 0.5, 1}
};

static float4x4 LightWorldViewProjMatrix = mul(WorldMatrixX, mul(mul(LightWorldMatrix, LightViewMatrix), LightProjMatrix));
static float sampstep = 1.0 / ShadowSize.x;

struct VS_ZValuePlot_OUTPUT {
    float4 Pos : POSITION;              // 射影変換座標
    float4 ShadowMapTex : TEXCOORD1;    // Zバッファテクスチャ
    float2 Tex : TEXCOORD0;
};

// 頂点シェーダ
VS_ZValuePlot_OUTPUT ZValuePlot_VS( float4 Pos : POSITION )
{
    VS_ZValuePlot_OUTPUT Out = (VS_ZValuePlot_OUTPUT)0;
    // ライトの目線によるワールドビュー射影変換をする
    Out.Pos = mul( Pos, LightWorldViewProjMatrix );
    // テクスチャ座標を頂点に合わせる
    Out.ShadowMapTex = Out.Pos;
    return Out;
}

#define TEXSHADOW 0

// ピクセルシェーダ
float4 ZValuePlot_PS(VS_ZValuePlot_OUTPUT IN) : COLOR
{
    float depth = IN.ShadowMapTex.z / IN.ShadowMapTex.w;
    //r値にz、g値にz^2
    float4 color = float4(depth, depth * depth, 0, 1);
    #if TEXSHADOW==1
        float alpha = MaterialDiffuse.a;
        if(useTexture) alpha *= tex2D(ObjectTextureSampler, IN.Tex).a;
        color.a = (alpha > ShadowAlphaThreshold);
    #endif
    return color;
}

// Z値プロット用テクニック
technique ZplotTec < string MMDPass = "zplot"; > {
    pass ZValuePlot {
        FrontFace = CW;
        VertexShader = compile glslv ZValuePlot_VS();
        PixelShader  = compile glslf ZValuePlot_PS();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウON）

// シャドウバッファのサンプラ。"register(s0)"なのはMMDがs0を使っているから
sampler ShadowMapSampler : register(s0);

float2 GetZBufSample(float2 texc){
    float step = sampstep;
    float2 Out = tex2D(ShadowMapSampler, texc).rg * 2;
    Out += tex2D(ShadowMapSampler, texc + float2(0, step)).rg;
    Out += tex2D(ShadowMapSampler, texc + float2(0, -step)).rg;
    Out += tex2D(ShadowMapSampler, texc + float2(step, 0)).rg;
    Out += tex2D(ShadowMapSampler, texc + float2(-step, 0)).rg;
    Out += tex2D(ShadowMapSampler, texc + float2(step, step)).rg;
    Out += tex2D(ShadowMapSampler, texc + float2(-step, step)).rg;
    Out += tex2D(ShadowMapSampler, texc + float2(step, -step)).rg;
    Out += tex2D(ShadowMapSampler, texc + float2(-step, -step)).rg;
    Out /= 10;
    return Out;
}

struct BufferShadow_OUTPUT {
    VS_OUTPUT Base;
    float4 ZCalcTex : TEXCOORD0;    // Z値
};

// 頂点シェーダ
BufferShadow_OUTPUT BufferShadow_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon)
{
    BufferShadow_OUTPUT Out = (BufferShadow_OUTPUT)0;
    Out.Base = VPVM_GetVertexShaderOutput(Pos, Normal, Tex, useSphereMap, useToon);
    // ライト視点によるワールドビュー射影変換
    Out.ZCalcTex = mul( Pos, LightWorldViewProjMatrix );
    return Out;
}

// ピクセルシェーダ
float4 BufferShadow_PS(BufferShadow_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon) : COLOR
{
    PS_Pixel Pixel = VPVM_GetMaterialColor(IN.Base, useTexture, useSphereMap);

    // テクスチャ座標に変換
    IN.ZCalcTex /= IN.ZCalcTex.w;
    float2 TransTexCoord = 0.5 + IN.ZCalcTex.xy * 0.5;
    float comp = saturate(dot(IN.Base.Normal, -LightDirection) * Toon);

    if (!any(saturate(TransTexCoord) != TransTexCoord)) {
        // シャドウバッファ内
        float2 depth = GetZBufSample(TransTexCoord);
        depth.y += 0.00002;
        float sigma2 = depth.y - depth.x * depth.x;
        float d = IN.ZCalcTex.z - depth.x;
        float comp2 = sigma2 / (sigma2 + (d * d));
        comp2 = saturate(comp2) + (comp2 < 0);
        comp = min(comp, comp2);
    }

    if (useToon) {
        // トゥーン適用
        Pixel.ShadowColor.rgb *= MaterialToon;
        Pixel.ShadowColor.rgb *= (1 - (1 - ShadowRate) * PMD_SHADOWPOWER);
    }
    else {
        Pixel.ShadowColor.rgb *= (1 - (1 - ShadowRate) * X_SHADOWPOWER);
    }

    return lerp(Pixel.ShadowColor, Pixel.Color, comp);
}

// オブジェクト描画用テクニック（アクセサリ用）
technique MainTecBS0  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(false, false, false);
        PixelShader  = compile glslf BufferShadow_PS(false, false, false);
    }
}

technique MainTecBS1  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(true, false, false);
        PixelShader  = compile glslf BufferShadow_PS(true, false, false);
    }
}

technique MainTecBS2  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(false, true, false);
        PixelShader  = compile glslf BufferShadow_PS(false, true, false);
    }
}

technique MainTecBS3  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(true, true, false);
        PixelShader  = compile glslf BufferShadow_PS(true, true, false);
    }
}

// オブジェクト描画用テクニック（PMDモデル用）
technique MainTecBS4  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(false, false, true);
        PixelShader  = compile glslf BufferShadow_PS(false, false, true);
    }
}

technique MainTecBS5  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(true, false, true);
        PixelShader  = compile glslf BufferShadow_PS(true, false, true);
    }
}

technique MainTecBS6  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(false, true, true);
        PixelShader  = compile glslf BufferShadow_PS(false, true, true);
    }
}

technique MainTecBS7  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile glslv BufferShadow_VS(true, true, true);
        PixelShader  = compile glslf BufferShadow_PS(true, true, true);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
